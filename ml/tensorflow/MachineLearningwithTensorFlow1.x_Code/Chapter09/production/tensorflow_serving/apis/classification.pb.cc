// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/apis/classification.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow_serving/apis/classification.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {
namespace serving {

namespace {

const ::google::protobuf::Descriptor* Class_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Class_reflection_ = NULL;
const ::google::protobuf::Descriptor* Classifications_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Classifications_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClassificationResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClassificationResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClassificationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClassificationRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClassificationResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClassificationResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tensorflow_5fserving_2fapis_2fclassification_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_tensorflow_5fserving_2fapis_2fclassification_2eproto() {
  protobuf_AddDesc_tensorflow_5fserving_2fapis_2fclassification_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tensorflow_serving/apis/classification.proto");
  GOOGLE_CHECK(file != NULL);
  Class_descriptor_ = file->message_type(0);
  static const int Class_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Class, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Class, score_),
  };
  Class_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Class_descriptor_,
      Class::internal_default_instance(),
      Class_offsets_,
      -1,
      -1,
      -1,
      sizeof(Class),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Class, _internal_metadata_));
  Classifications_descriptor_ = file->message_type(1);
  static const int Classifications_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Classifications, classes_),
  };
  Classifications_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Classifications_descriptor_,
      Classifications::internal_default_instance(),
      Classifications_offsets_,
      -1,
      -1,
      -1,
      sizeof(Classifications),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Classifications, _internal_metadata_));
  ClassificationResult_descriptor_ = file->message_type(2);
  static const int ClassificationResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassificationResult, classifications_),
  };
  ClassificationResult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClassificationResult_descriptor_,
      ClassificationResult::internal_default_instance(),
      ClassificationResult_offsets_,
      -1,
      -1,
      -1,
      sizeof(ClassificationResult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassificationResult, _internal_metadata_));
  ClassificationRequest_descriptor_ = file->message_type(3);
  static const int ClassificationRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassificationRequest, model_spec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassificationRequest, input_),
  };
  ClassificationRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClassificationRequest_descriptor_,
      ClassificationRequest::internal_default_instance(),
      ClassificationRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ClassificationRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassificationRequest, _internal_metadata_));
  ClassificationResponse_descriptor_ = file->message_type(4);
  static const int ClassificationResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassificationResponse, result_),
  };
  ClassificationResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClassificationResponse_descriptor_,
      ClassificationResponse::internal_default_instance(),
      ClassificationResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ClassificationResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassificationResponse, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tensorflow_5fserving_2fapis_2fclassification_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Class_descriptor_, Class::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Classifications_descriptor_, Classifications::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClassificationResult_descriptor_, ClassificationResult::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClassificationRequest_descriptor_, ClassificationRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClassificationResponse_descriptor_, ClassificationResponse::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tensorflow_5fserving_2fapis_2fclassification_2eproto() {
  Class_default_instance_.Shutdown();
  delete Class_reflection_;
  Classifications_default_instance_.Shutdown();
  delete Classifications_reflection_;
  ClassificationResult_default_instance_.Shutdown();
  delete ClassificationResult_reflection_;
  ClassificationRequest_default_instance_.Shutdown();
  delete ClassificationRequest_reflection_;
  ClassificationResponse_default_instance_.Shutdown();
  delete ClassificationResponse_reflection_;
}

void protobuf_InitDefaults_tensorflow_5fserving_2fapis_2fclassification_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::tensorflow::serving::protobuf_InitDefaults_tensorflow_5fserving_2fapis_2finput_2eproto();
  ::tensorflow::serving::protobuf_InitDefaults_tensorflow_5fserving_2fapis_2fmodel_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  Class_default_instance_.DefaultConstruct();
  Classifications_default_instance_.DefaultConstruct();
  ClassificationResult_default_instance_.DefaultConstruct();
  ClassificationRequest_default_instance_.DefaultConstruct();
  ClassificationResponse_default_instance_.DefaultConstruct();
  Class_default_instance_.get_mutable()->InitAsDefaultInstance();
  Classifications_default_instance_.get_mutable()->InitAsDefaultInstance();
  ClassificationResult_default_instance_.get_mutable()->InitAsDefaultInstance();
  ClassificationRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  ClassificationResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_tensorflow_5fserving_2fapis_2fclassification_2eproto_once_);
void protobuf_InitDefaults_tensorflow_5fserving_2fapis_2fclassification_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_tensorflow_5fserving_2fapis_2fclassification_2eproto_once_,
                 &protobuf_InitDefaults_tensorflow_5fserving_2fapis_2fclassification_2eproto_impl);
}
void protobuf_AddDesc_tensorflow_5fserving_2fapis_2fclassification_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_tensorflow_5fserving_2fapis_2fclassification_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n,tensorflow_serving/apis/classification"
    ".proto\022\022tensorflow.serving\032#tensorflow_s"
    "erving/apis/input.proto\032#tensorflow_serv"
    "ing/apis/model.proto\"%\n\005Class\022\r\n\005label\030\001"
    " \001(\t\022\r\n\005score\030\002 \001(\002\"=\n\017Classifications\022*"
    "\n\007classes\030\001 \003(\0132\031.tensorflow.serving.Cla"
    "ss\"T\n\024ClassificationResult\022<\n\017classifica"
    "tions\030\001 \003(\0132#.tensorflow.serving.Classif"
    "ications\"t\n\025ClassificationRequest\0221\n\nmod"
    "el_spec\030\001 \001(\0132\035.tensorflow.serving.Model"
    "Spec\022(\n\005input\030\002 \001(\0132\031.tensorflow.serving"
    ".Input\"R\n\026ClassificationResponse\0228\n\006resu"
    "lt\030\001 \001(\0132(.tensorflow.serving.Classifica"
    "tionResultB\003\370\001\001b\006proto3", 543);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow_serving/apis/classification.proto", &protobuf_RegisterTypes);
  ::tensorflow::serving::protobuf_AddDesc_tensorflow_5fserving_2fapis_2finput_2eproto();
  ::tensorflow::serving::protobuf_AddDesc_tensorflow_5fserving_2fapis_2fmodel_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tensorflow_5fserving_2fapis_2fclassification_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_tensorflow_5fserving_2fapis_2fclassification_2eproto_once_);
void protobuf_AddDesc_tensorflow_5fserving_2fapis_2fclassification_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_tensorflow_5fserving_2fapis_2fclassification_2eproto_once_,
                 &protobuf_AddDesc_tensorflow_5fserving_2fapis_2fclassification_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tensorflow_5fserving_2fapis_2fclassification_2eproto {
  StaticDescriptorInitializer_tensorflow_5fserving_2fapis_2fclassification_2eproto() {
    protobuf_AddDesc_tensorflow_5fserving_2fapis_2fclassification_2eproto();
  }
} static_descriptor_initializer_tensorflow_5fserving_2fapis_2fclassification_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Class::kLabelFieldNumber;
const int Class::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Class::Class()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_5fserving_2fapis_2fclassification_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.serving.Class)
}
Class::Class(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_5fserving_2fapis_2fclassification_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.Class)
}

void Class::InitAsDefaultInstance() {
}

Class::Class(const Class& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.Class)
}

void Class::SharedCtor() {
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  score_ = 0;
  _cached_size_ = 0;
}

Class::~Class() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.Class)
  SharedDtor();
}

void Class::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  label_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void Class::ArenaDtor(void* object) {
  Class* _this = reinterpret_cast< Class* >(object);
  (void)_this;
}
void Class::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Class::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Class::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Class_descriptor_;
}

const Class& Class::default_instance() {
  protobuf_InitDefaults_tensorflow_5fserving_2fapis_2fclassification_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Class> Class_default_instance_;

Class* Class::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Class>(arena);
}

void Class::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.Class)
  label_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  score_ = 0;
}

bool Class::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.serving.Class)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string label = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.serving.Class.label"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_score;
        break;
      }

      // optional float score = 2;
      case 2: {
        if (tag == 21) {
         parse_score:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.serving.Class)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.serving.Class)
  return false;
#undef DO_
}

void Class::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.serving.Class)
  // optional string label = 1;
  if (this->label().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.Class.label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->label(), output);
  }

  // optional float score = 2;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->score(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.serving.Class)
}

::google::protobuf::uint8* Class::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.Class)
  // optional string label = 1;
  if (this->label().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.Class.label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->label(), target);
  }

  // optional float score = 2;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->score(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.Class)
  return target;
}

size_t Class::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.Class)
  size_t total_size = 0;

  // optional string label = 1;
  if (this->label().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->label());
  }

  // optional float score = 2;
  if (this->score() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Class::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.Class)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Class* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Class>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.Class)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.Class)
    UnsafeMergeFrom(*source);
  }
}

void Class::MergeFrom(const Class& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.Class)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Class::UnsafeMergeFrom(const Class& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.label().size() > 0) {
    set_label(from.label());
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
}

void Class::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.Class)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Class::CopyFrom(const Class& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.Class)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Class::IsInitialized() const {

  return true;
}

void Class::Swap(Class* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Class temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void Class::UnsafeArenaSwap(Class* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Class::InternalSwap(Class* other) {
  label_.Swap(&other->label_);
  std::swap(score_, other->score_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Class::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Class_descriptor_;
  metadata.reflection = Class_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Class

// optional string label = 1;
void Class::clear_label() {
  label_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Class::label() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.Class.label)
  return label_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Class::set_label(const ::std::string& value) {
  
  label_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.serving.Class.label)
}
void Class::set_label(const char* value) {
  
  label_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.Class.label)
}
void Class::set_label(const char* value,
    size_t size) {
  
  label_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.Class.label)
}
::std::string* Class::mutable_label() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.Class.label)
  return label_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Class::release_label() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.Class.label)
  
  return label_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Class::unsafe_arena_release_label() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.Class.label)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return label_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Class::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    
  } else {
    
  }
  label_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.Class.label)
}
void Class::unsafe_arena_set_allocated_label(
    ::std::string* label) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (label != NULL) {
    
  } else {
    
  }
  label_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      label, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.Class.label)
}

// optional float score = 2;
void Class::clear_score() {
  score_ = 0;
}
float Class::score() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.Class.score)
  return score_;
}
void Class::set_score(float value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.serving.Class.score)
}

inline const Class* Class::internal_default_instance() {
  return &Class_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Classifications::kClassesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Classifications::Classifications()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_5fserving_2fapis_2fclassification_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.serving.Classifications)
}
Classifications::Classifications(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  classes_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_5fserving_2fapis_2fclassification_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.Classifications)
}

void Classifications::InitAsDefaultInstance() {
}

Classifications::Classifications(const Classifications& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.Classifications)
}

void Classifications::SharedCtor() {
  _cached_size_ = 0;
}

Classifications::~Classifications() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.Classifications)
  SharedDtor();
}

void Classifications::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void Classifications::ArenaDtor(void* object) {
  Classifications* _this = reinterpret_cast< Classifications* >(object);
  (void)_this;
}
void Classifications::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Classifications::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Classifications::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Classifications_descriptor_;
}

const Classifications& Classifications::default_instance() {
  protobuf_InitDefaults_tensorflow_5fserving_2fapis_2fclassification_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Classifications> Classifications_default_instance_;

Classifications* Classifications::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Classifications>(arena);
}

void Classifications::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.Classifications)
  classes_.Clear();
}

bool Classifications::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.serving.Classifications)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.serving.Class classes = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_classes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_classes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_classes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.serving.Classifications)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.serving.Classifications)
  return false;
#undef DO_
}

void Classifications::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.serving.Classifications)
  // repeated .tensorflow.serving.Class classes = 1;
  for (unsigned int i = 0, n = this->classes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->classes(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.serving.Classifications)
}

::google::protobuf::uint8* Classifications::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.Classifications)
  // repeated .tensorflow.serving.Class classes = 1;
  for (unsigned int i = 0, n = this->classes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->classes(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.Classifications)
  return target;
}

size_t Classifications::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.Classifications)
  size_t total_size = 0;

  // repeated .tensorflow.serving.Class classes = 1;
  {
    unsigned int count = this->classes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->classes(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Classifications::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.Classifications)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Classifications* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Classifications>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.Classifications)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.Classifications)
    UnsafeMergeFrom(*source);
  }
}

void Classifications::MergeFrom(const Classifications& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.Classifications)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Classifications::UnsafeMergeFrom(const Classifications& from) {
  GOOGLE_DCHECK(&from != this);
  classes_.MergeFrom(from.classes_);
}

void Classifications::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.Classifications)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Classifications::CopyFrom(const Classifications& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.Classifications)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Classifications::IsInitialized() const {

  return true;
}

void Classifications::Swap(Classifications* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Classifications temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void Classifications::UnsafeArenaSwap(Classifications* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Classifications::InternalSwap(Classifications* other) {
  classes_.UnsafeArenaSwap(&other->classes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Classifications::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Classifications_descriptor_;
  metadata.reflection = Classifications_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Classifications

// repeated .tensorflow.serving.Class classes = 1;
int Classifications::classes_size() const {
  return classes_.size();
}
void Classifications::clear_classes() {
  classes_.Clear();
}
const ::tensorflow::serving::Class& Classifications::classes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.Classifications.classes)
  return classes_.Get(index);
}
::tensorflow::serving::Class* Classifications::mutable_classes(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.Classifications.classes)
  return classes_.Mutable(index);
}
::tensorflow::serving::Class* Classifications::add_classes() {
  // @@protoc_insertion_point(field_add:tensorflow.serving.Classifications.classes)
  return classes_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::serving::Class >*
Classifications::mutable_classes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.serving.Classifications.classes)
  return &classes_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::serving::Class >&
Classifications::classes() const {
  // @@protoc_insertion_point(field_list:tensorflow.serving.Classifications.classes)
  return classes_;
}

inline const Classifications* Classifications::internal_default_instance() {
  return &Classifications_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClassificationResult::kClassificationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClassificationResult::ClassificationResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_5fserving_2fapis_2fclassification_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.serving.ClassificationResult)
}
ClassificationResult::ClassificationResult(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  classifications_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_5fserving_2fapis_2fclassification_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.ClassificationResult)
}

void ClassificationResult::InitAsDefaultInstance() {
}

ClassificationResult::ClassificationResult(const ClassificationResult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.ClassificationResult)
}

void ClassificationResult::SharedCtor() {
  _cached_size_ = 0;
}

ClassificationResult::~ClassificationResult() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.ClassificationResult)
  SharedDtor();
}

void ClassificationResult::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void ClassificationResult::ArenaDtor(void* object) {
  ClassificationResult* _this = reinterpret_cast< ClassificationResult* >(object);
  (void)_this;
}
void ClassificationResult::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ClassificationResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClassificationResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClassificationResult_descriptor_;
}

const ClassificationResult& ClassificationResult::default_instance() {
  protobuf_InitDefaults_tensorflow_5fserving_2fapis_2fclassification_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ClassificationResult> ClassificationResult_default_instance_;

ClassificationResult* ClassificationResult::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ClassificationResult>(arena);
}

void ClassificationResult::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.ClassificationResult)
  classifications_.Clear();
}

bool ClassificationResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.serving.ClassificationResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.serving.Classifications classifications = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_classifications:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_classifications()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_classifications;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.serving.ClassificationResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.serving.ClassificationResult)
  return false;
#undef DO_
}

void ClassificationResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.serving.ClassificationResult)
  // repeated .tensorflow.serving.Classifications classifications = 1;
  for (unsigned int i = 0, n = this->classifications_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->classifications(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.serving.ClassificationResult)
}

::google::protobuf::uint8* ClassificationResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.ClassificationResult)
  // repeated .tensorflow.serving.Classifications classifications = 1;
  for (unsigned int i = 0, n = this->classifications_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->classifications(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.ClassificationResult)
  return target;
}

size_t ClassificationResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.ClassificationResult)
  size_t total_size = 0;

  // repeated .tensorflow.serving.Classifications classifications = 1;
  {
    unsigned int count = this->classifications_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->classifications(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClassificationResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.ClassificationResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ClassificationResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClassificationResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.ClassificationResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.ClassificationResult)
    UnsafeMergeFrom(*source);
  }
}

void ClassificationResult::MergeFrom(const ClassificationResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.ClassificationResult)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ClassificationResult::UnsafeMergeFrom(const ClassificationResult& from) {
  GOOGLE_DCHECK(&from != this);
  classifications_.MergeFrom(from.classifications_);
}

void ClassificationResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.ClassificationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClassificationResult::CopyFrom(const ClassificationResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.ClassificationResult)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ClassificationResult::IsInitialized() const {

  return true;
}

void ClassificationResult::Swap(ClassificationResult* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ClassificationResult temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ClassificationResult::UnsafeArenaSwap(ClassificationResult* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ClassificationResult::InternalSwap(ClassificationResult* other) {
  classifications_.UnsafeArenaSwap(&other->classifications_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClassificationResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClassificationResult_descriptor_;
  metadata.reflection = ClassificationResult_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClassificationResult

// repeated .tensorflow.serving.Classifications classifications = 1;
int ClassificationResult::classifications_size() const {
  return classifications_.size();
}
void ClassificationResult::clear_classifications() {
  classifications_.Clear();
}
const ::tensorflow::serving::Classifications& ClassificationResult::classifications(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ClassificationResult.classifications)
  return classifications_.Get(index);
}
::tensorflow::serving::Classifications* ClassificationResult::mutable_classifications(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ClassificationResult.classifications)
  return classifications_.Mutable(index);
}
::tensorflow::serving::Classifications* ClassificationResult::add_classifications() {
  // @@protoc_insertion_point(field_add:tensorflow.serving.ClassificationResult.classifications)
  return classifications_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::serving::Classifications >*
ClassificationResult::mutable_classifications() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.serving.ClassificationResult.classifications)
  return &classifications_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::serving::Classifications >&
ClassificationResult::classifications() const {
  // @@protoc_insertion_point(field_list:tensorflow.serving.ClassificationResult.classifications)
  return classifications_;
}

inline const ClassificationResult* ClassificationResult::internal_default_instance() {
  return &ClassificationResult_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void ClassificationRequest::_slow_mutable_model_spec() {
  model_spec_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::serving::ModelSpec >(
      GetArenaNoVirtual());
}
::tensorflow::serving::ModelSpec* ClassificationRequest::_slow_release_model_spec() {
  if (model_spec_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::serving::ModelSpec* temp = new ::tensorflow::serving::ModelSpec(*model_spec_);
    model_spec_ = NULL;
    return temp;
  }
}
::tensorflow::serving::ModelSpec* ClassificationRequest::unsafe_arena_release_model_spec() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.ClassificationRequest.model_spec)
  
  ::tensorflow::serving::ModelSpec* temp = model_spec_;
  model_spec_ = NULL;
  return temp;
}
void ClassificationRequest::_slow_set_allocated_model_spec(
    ::google::protobuf::Arena* message_arena, ::tensorflow::serving::ModelSpec** model_spec) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*model_spec) == NULL) {
      message_arena->Own(*model_spec);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*model_spec)) {
      ::tensorflow::serving::ModelSpec* new_model_spec = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::serving::ModelSpec >(
            message_arena);
      new_model_spec->CopyFrom(**model_spec);
      *model_spec = new_model_spec;
    }
}
void ClassificationRequest::unsafe_arena_set_allocated_model_spec(
    ::tensorflow::serving::ModelSpec* model_spec) {
  if (GetArenaNoVirtual() == NULL) {
    delete model_spec_;
  }
  model_spec_ = model_spec;
  if (model_spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.ClassificationRequest.model_spec)
}
void ClassificationRequest::_slow_mutable_input() {
  input_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::serving::Input >(
      GetArenaNoVirtual());
}
::tensorflow::serving::Input* ClassificationRequest::_slow_release_input() {
  if (input_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::serving::Input* temp = new ::tensorflow::serving::Input(*input_);
    input_ = NULL;
    return temp;
  }
}
::tensorflow::serving::Input* ClassificationRequest::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.ClassificationRequest.input)
  
  ::tensorflow::serving::Input* temp = input_;
  input_ = NULL;
  return temp;
}
void ClassificationRequest::_slow_set_allocated_input(
    ::google::protobuf::Arena* message_arena, ::tensorflow::serving::Input** input) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*input) == NULL) {
      message_arena->Own(*input);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*input)) {
      ::tensorflow::serving::Input* new_input = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::serving::Input >(
            message_arena);
      new_input->CopyFrom(**input);
      *input = new_input;
    }
}
void ClassificationRequest::unsafe_arena_set_allocated_input(
    ::tensorflow::serving::Input* input) {
  if (GetArenaNoVirtual() == NULL) {
    delete input_;
  }
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.ClassificationRequest.input)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClassificationRequest::kModelSpecFieldNumber;
const int ClassificationRequest::kInputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClassificationRequest::ClassificationRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_5fserving_2fapis_2fclassification_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.serving.ClassificationRequest)
}
ClassificationRequest::ClassificationRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_5fserving_2fapis_2fclassification_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.ClassificationRequest)
}

void ClassificationRequest::InitAsDefaultInstance() {
  model_spec_ = const_cast< ::tensorflow::serving::ModelSpec*>(
      ::tensorflow::serving::ModelSpec::internal_default_instance());
  input_ = const_cast< ::tensorflow::serving::Input*>(
      ::tensorflow::serving::Input::internal_default_instance());
}

ClassificationRequest::ClassificationRequest(const ClassificationRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.ClassificationRequest)
}

void ClassificationRequest::SharedCtor() {
  model_spec_ = NULL;
  input_ = NULL;
  _cached_size_ = 0;
}

ClassificationRequest::~ClassificationRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.ClassificationRequest)
  SharedDtor();
}

void ClassificationRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != &ClassificationRequest_default_instance_.get()) {
    delete model_spec_;
    delete input_;
  }
}

void ClassificationRequest::ArenaDtor(void* object) {
  ClassificationRequest* _this = reinterpret_cast< ClassificationRequest* >(object);
  (void)_this;
}
void ClassificationRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ClassificationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClassificationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClassificationRequest_descriptor_;
}

const ClassificationRequest& ClassificationRequest::default_instance() {
  protobuf_InitDefaults_tensorflow_5fserving_2fapis_2fclassification_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ClassificationRequest> ClassificationRequest_default_instance_;

ClassificationRequest* ClassificationRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ClassificationRequest>(arena);
}

void ClassificationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.ClassificationRequest)
  if (GetArenaNoVirtual() == NULL && model_spec_ != NULL) delete model_spec_;
  model_spec_ = NULL;
  if (GetArenaNoVirtual() == NULL && input_ != NULL) delete input_;
  input_ = NULL;
}

bool ClassificationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.serving.ClassificationRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tensorflow.serving.ModelSpec model_spec = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_model_spec()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_input;
        break;
      }

      // optional .tensorflow.serving.Input input = 2;
      case 2: {
        if (tag == 18) {
         parse_input:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_input()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.serving.ClassificationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.serving.ClassificationRequest)
  return false;
#undef DO_
}

void ClassificationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.serving.ClassificationRequest)
  // optional .tensorflow.serving.ModelSpec model_spec = 1;
  if (this->has_model_spec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->model_spec_, output);
  }

  // optional .tensorflow.serving.Input input = 2;
  if (this->has_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->input_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.serving.ClassificationRequest)
}

::google::protobuf::uint8* ClassificationRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.ClassificationRequest)
  // optional .tensorflow.serving.ModelSpec model_spec = 1;
  if (this->has_model_spec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->model_spec_, false, target);
  }

  // optional .tensorflow.serving.Input input = 2;
  if (this->has_input()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->input_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.ClassificationRequest)
  return target;
}

size_t ClassificationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.ClassificationRequest)
  size_t total_size = 0;

  // optional .tensorflow.serving.ModelSpec model_spec = 1;
  if (this->has_model_spec()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->model_spec_);
  }

  // optional .tensorflow.serving.Input input = 2;
  if (this->has_input()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->input_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClassificationRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.ClassificationRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ClassificationRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClassificationRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.ClassificationRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.ClassificationRequest)
    UnsafeMergeFrom(*source);
  }
}

void ClassificationRequest::MergeFrom(const ClassificationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.ClassificationRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ClassificationRequest::UnsafeMergeFrom(const ClassificationRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_model_spec()) {
    mutable_model_spec()->::tensorflow::serving::ModelSpec::MergeFrom(from.model_spec());
  }
  if (from.has_input()) {
    mutable_input()->::tensorflow::serving::Input::MergeFrom(from.input());
  }
}

void ClassificationRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.ClassificationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClassificationRequest::CopyFrom(const ClassificationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.ClassificationRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ClassificationRequest::IsInitialized() const {

  return true;
}

void ClassificationRequest::Swap(ClassificationRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ClassificationRequest temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ClassificationRequest::UnsafeArenaSwap(ClassificationRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ClassificationRequest::InternalSwap(ClassificationRequest* other) {
  std::swap(model_spec_, other->model_spec_);
  std::swap(input_, other->input_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClassificationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClassificationRequest_descriptor_;
  metadata.reflection = ClassificationRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClassificationRequest

// optional .tensorflow.serving.ModelSpec model_spec = 1;
bool ClassificationRequest::has_model_spec() const {
  return this != internal_default_instance() && model_spec_ != NULL;
}
void ClassificationRequest::clear_model_spec() {
  if (GetArenaNoVirtual() == NULL && model_spec_ != NULL) delete model_spec_;
  model_spec_ = NULL;
}
const ::tensorflow::serving::ModelSpec& ClassificationRequest::model_spec() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ClassificationRequest.model_spec)
  return model_spec_ != NULL ? *model_spec_
                         : *::tensorflow::serving::ModelSpec::internal_default_instance();
}
::tensorflow::serving::ModelSpec* ClassificationRequest::mutable_model_spec() {
  
  if (model_spec_ == NULL) {
    _slow_mutable_model_spec();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ClassificationRequest.model_spec)
  return model_spec_;
}
::tensorflow::serving::ModelSpec* ClassificationRequest::release_model_spec() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.ClassificationRequest.model_spec)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_model_spec();
  } else {
    ::tensorflow::serving::ModelSpec* temp = model_spec_;
    model_spec_ = NULL;
    return temp;
  }
}
 void ClassificationRequest::set_allocated_model_spec(::tensorflow::serving::ModelSpec* model_spec) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete model_spec_;
  }
  if (model_spec != NULL) {
    _slow_set_allocated_model_spec(message_arena, &model_spec);
  }
  model_spec_ = model_spec;
  if (model_spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ClassificationRequest.model_spec)
}

// optional .tensorflow.serving.Input input = 2;
bool ClassificationRequest::has_input() const {
  return this != internal_default_instance() && input_ != NULL;
}
void ClassificationRequest::clear_input() {
  if (GetArenaNoVirtual() == NULL && input_ != NULL) delete input_;
  input_ = NULL;
}
const ::tensorflow::serving::Input& ClassificationRequest::input() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ClassificationRequest.input)
  return input_ != NULL ? *input_
                         : *::tensorflow::serving::Input::internal_default_instance();
}
::tensorflow::serving::Input* ClassificationRequest::mutable_input() {
  
  if (input_ == NULL) {
    _slow_mutable_input();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ClassificationRequest.input)
  return input_;
}
::tensorflow::serving::Input* ClassificationRequest::release_input() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.ClassificationRequest.input)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_input();
  } else {
    ::tensorflow::serving::Input* temp = input_;
    input_ = NULL;
    return temp;
  }
}
 void ClassificationRequest::set_allocated_input(::tensorflow::serving::Input* input) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete input_;
  }
  if (input != NULL) {
    _slow_set_allocated_input(message_arena, &input);
  }
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ClassificationRequest.input)
}

inline const ClassificationRequest* ClassificationRequest::internal_default_instance() {
  return &ClassificationRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void ClassificationResponse::_slow_mutable_result() {
  result_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::serving::ClassificationResult >(
      GetArenaNoVirtual());
}
::tensorflow::serving::ClassificationResult* ClassificationResponse::_slow_release_result() {
  if (result_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::serving::ClassificationResult* temp = new ::tensorflow::serving::ClassificationResult(*result_);
    result_ = NULL;
    return temp;
  }
}
::tensorflow::serving::ClassificationResult* ClassificationResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.ClassificationResponse.result)
  
  ::tensorflow::serving::ClassificationResult* temp = result_;
  result_ = NULL;
  return temp;
}
void ClassificationResponse::_slow_set_allocated_result(
    ::google::protobuf::Arena* message_arena, ::tensorflow::serving::ClassificationResult** result) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*result) == NULL) {
      message_arena->Own(*result);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*result)) {
      ::tensorflow::serving::ClassificationResult* new_result = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::serving::ClassificationResult >(
            message_arena);
      new_result->CopyFrom(**result);
      *result = new_result;
    }
}
void ClassificationResponse::unsafe_arena_set_allocated_result(
    ::tensorflow::serving::ClassificationResult* result) {
  if (GetArenaNoVirtual() == NULL) {
    delete result_;
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.ClassificationResponse.result)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClassificationResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClassificationResponse::ClassificationResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_5fserving_2fapis_2fclassification_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.serving.ClassificationResponse)
}
ClassificationResponse::ClassificationResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_tensorflow_5fserving_2fapis_2fclassification_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.ClassificationResponse)
}

void ClassificationResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::tensorflow::serving::ClassificationResult*>(
      ::tensorflow::serving::ClassificationResult::internal_default_instance());
}

ClassificationResponse::ClassificationResponse(const ClassificationResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.ClassificationResponse)
}

void ClassificationResponse::SharedCtor() {
  result_ = NULL;
  _cached_size_ = 0;
}

ClassificationResponse::~ClassificationResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.ClassificationResponse)
  SharedDtor();
}

void ClassificationResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != &ClassificationResponse_default_instance_.get()) {
    delete result_;
  }
}

void ClassificationResponse::ArenaDtor(void* object) {
  ClassificationResponse* _this = reinterpret_cast< ClassificationResponse* >(object);
  (void)_this;
}
void ClassificationResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ClassificationResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClassificationResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClassificationResponse_descriptor_;
}

const ClassificationResponse& ClassificationResponse::default_instance() {
  protobuf_InitDefaults_tensorflow_5fserving_2fapis_2fclassification_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ClassificationResponse> ClassificationResponse_default_instance_;

ClassificationResponse* ClassificationResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ClassificationResponse>(arena);
}

void ClassificationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.ClassificationResponse)
  if (GetArenaNoVirtual() == NULL && result_ != NULL) delete result_;
  result_ = NULL;
}

bool ClassificationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.serving.ClassificationResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tensorflow.serving.ClassificationResult result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.serving.ClassificationResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.serving.ClassificationResponse)
  return false;
#undef DO_
}

void ClassificationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.serving.ClassificationResponse)
  // optional .tensorflow.serving.ClassificationResult result = 1;
  if (this->has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->result_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.serving.ClassificationResponse)
}

::google::protobuf::uint8* ClassificationResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.ClassificationResponse)
  // optional .tensorflow.serving.ClassificationResult result = 1;
  if (this->has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->result_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.ClassificationResponse)
  return target;
}

size_t ClassificationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.ClassificationResponse)
  size_t total_size = 0;

  // optional .tensorflow.serving.ClassificationResult result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->result_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClassificationResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.ClassificationResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ClassificationResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClassificationResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.ClassificationResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.ClassificationResponse)
    UnsafeMergeFrom(*source);
  }
}

void ClassificationResponse::MergeFrom(const ClassificationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.ClassificationResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ClassificationResponse::UnsafeMergeFrom(const ClassificationResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_result()) {
    mutable_result()->::tensorflow::serving::ClassificationResult::MergeFrom(from.result());
  }
}

void ClassificationResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.ClassificationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClassificationResponse::CopyFrom(const ClassificationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.ClassificationResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ClassificationResponse::IsInitialized() const {

  return true;
}

void ClassificationResponse::Swap(ClassificationResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ClassificationResponse temp;
    temp.UnsafeMergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ClassificationResponse::UnsafeArenaSwap(ClassificationResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ClassificationResponse::InternalSwap(ClassificationResponse* other) {
  std::swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClassificationResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClassificationResponse_descriptor_;
  metadata.reflection = ClassificationResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClassificationResponse

// optional .tensorflow.serving.ClassificationResult result = 1;
bool ClassificationResponse::has_result() const {
  return this != internal_default_instance() && result_ != NULL;
}
void ClassificationResponse::clear_result() {
  if (GetArenaNoVirtual() == NULL && result_ != NULL) delete result_;
  result_ = NULL;
}
const ::tensorflow::serving::ClassificationResult& ClassificationResponse::result() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ClassificationResponse.result)
  return result_ != NULL ? *result_
                         : *::tensorflow::serving::ClassificationResult::internal_default_instance();
}
::tensorflow::serving::ClassificationResult* ClassificationResponse::mutable_result() {
  
  if (result_ == NULL) {
    _slow_mutable_result();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ClassificationResponse.result)
  return result_;
}
::tensorflow::serving::ClassificationResult* ClassificationResponse::release_result() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.ClassificationResponse.result)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_result();
  } else {
    ::tensorflow::serving::ClassificationResult* temp = result_;
    result_ = NULL;
    return temp;
  }
}
 void ClassificationResponse::set_allocated_result(::tensorflow::serving::ClassificationResult* result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete result_;
  }
  if (result != NULL) {
    _slow_set_allocated_result(message_arena, &result);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ClassificationResponse.result)
}

inline const ClassificationResponse* ClassificationResponse::internal_default_instance() {
  return &ClassificationResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace serving
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
